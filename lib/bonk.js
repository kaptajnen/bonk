// Generated by CoffeeScript 1.3.3
(function() {
  var Bonk, fs, path, processors;

  fs = require('fs');

  path = require('path');

  Bonk = (function() {

    function Bonk() {}

    Bonk.prototype.bundle = function(paths) {
      var filename, modules, output, pathname, _i, _j, _len, _len1, _ref;
      modules = '';
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        pathname = paths[_i];
        _ref = this.getFiles(pathname);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          filename = _ref[_j];
          modules += this.makeModule(path.join(filename.slice(pathname.length), '..'), filename.slice(pathname.length, -path.extname(filename).length), this.processFile(filename));
        }
      }
      return output = "(function(){			var modules = {" + modules + "};						this.require = function require(name)			{				if (modules[name])				{					var module = {id: name, exports: {}};					var path = modules[name].path;					modules[name].module(module, module.exports, function(name)					{						if (name.indexOf('./') === 0 || name.indexOf('../') === 0)						{							while (true)							{								if (name.indexOf('./') === 0)								{									name = name.slice(2);								}								else if (name.indexOf('../') === 0)								{									name = name.slice(3);									if (path.indexOf('/') === -1)										path = '';									else										path = path.slice(0, path.lastIndexOf('/')+1);								}								else								{									break;								}							}														return require(path + name);						}						else						{							return require(name);						}					});										return module.exports;				}				else				{					throw 'Module ' + name + ' does not exist';				}			}		})()";
    };

    Bonk.prototype.getFiles = function(pathname) {
      var current, currentPath, files, stats, _i, _len;
      files = [];
      if (path.existsSync(pathname)) {
        current = fs.readdirSync(pathname);
        for (_i = 0, _len = current.length; _i < _len; _i++) {
          currentPath = current[_i];
          stats = fs.statSync(path.join(pathname, currentPath));
          if (stats.isDirectory()) {
            files = files.concat(this.getFiles(path.join(pathname, currentPath)));
          } else {
            files.push(path.join(pathname, currentPath));
          }
        }
      }
      return files;
    };

    Bonk.prototype.processFile = function(filename) {
      var extension;
      extension = (path.extname(filename)).slice(1);
      if (processors[extension]) {
        return processors[extension](filename);
      }
    };

    Bonk.prototype.makeModule = function(pathname, modulename, source) {
      if (pathname === '.') {
        pathname = '';
      }
      return "'" + modulename + "': {path: '" + pathname + "', module: function (module, exports, require) {" + source + "}},";
    };

    return Bonk;

  })();

  processors = {
    js: function(filename) {
      return fs.readFileSync(filename, 'utf8');
    },
    coffee: function(filename) {
      return (require('coffee-script')).compile(fs.readFileSync(filename, 'utf8'), {
        bare: true
      });
    },
    jade: function(filename) {
      return 'module.exports = ' + (require('jade')).compile(fs.readFileSync(filename, 'utf8'), {
        client: true
      });
    }
  };

  exports.Bonk = Bonk;

  exports.processors = processors;

}).call(this);
