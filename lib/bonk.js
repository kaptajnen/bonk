// Generated by CoffeeScript 1.3.3
(function() {
  var Bonk, fs, path, processors;

  fs = require('fs');

  path = require('path');

  Bonk = (function() {

    function Bonk() {}

    Bonk.prototype.bundle = function(paths) {
      var bareModules, filename, files, modulename, modules, output, pathname, settings, source, stats, _i, _j, _len, _len1;
      modules = '';
      bareModules = '';
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        pathname = paths[_i];
        settings = {
          bare: false
        };
        if (typeof pathname === 'object') {
          if (pathname.bare) {
            settings.bare = pathname.bare;
          }
          if (pathname.name) {
            settings.name = pathname.name;
          }
          if (pathname.file) {
            settings.file = pathname.file;
          }
        } else if (typeof pathname === 'string') {
          settings.file = pathname;
        }
        stats = fs.statSync(settings.file);
        if (stats.isDirectory()) {
          files = this.getFiles(settings.file);
          settings.name = void 0;
        } else if (stats.isFile()) {
          files = [settings.file];
        }
        for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
          filename = files[_j];
          source = this.processFile(filename);
          if (settings.bare) {
            bareModules += source + "\n";
          } else {
            modulename = settings.name ? settings.name : filename.slice(pathname.length, -path.extname(filename).length);
            modules += this.makeModule(modulename, source);
          }
        }
      }
      return output = {
        js: "" + bareModules + "\n(function(){\n	var modules = {" + modules + "};\n\n	this.require = function require(name)\n	{\n		if (modules[name])\n		{\n			var module = {id: name, exports: {}};\n			var path = modules[name].path;\n			modules[name].module(module, module.exports, function(name)\n			{\n				if (name.indexOf('./') === 0 || name.indexOf('../') === 0)\n				{\n					while (true)\n					{\n						if (name.indexOf('./') === 0)\n						{\n							name = name.slice(2);\n						}\n						else if (name.indexOf('../') === 0)\n						{\n							name = name.slice(3);\n							if (path.indexOf('/') === -1)\n								path = '';\n							else\n								path = path.slice(0, path.lastIndexOf('/')+1);\n						}\n						else\n						{\n							break;\n						}\n					}\n				\n					return require(path + name);\n				}\n				else\n				{\n					return require(name);\n				}\n			});\n		\n			return module.exports;\n		}\n		else\n		{\n			throw 'Module ' + name + ' does not exist';\n		}\n	}\n})()"
      };
    };

    Bonk.prototype.getFiles = function(pathname) {
      var current, currentPath, files, stats, _i, _len;
      files = [];
      if (path.existsSync(pathname)) {
        current = fs.readdirSync(pathname);
        for (_i = 0, _len = current.length; _i < _len; _i++) {
          currentPath = current[_i];
          stats = fs.statSync(path.join(pathname, currentPath));
          if (stats.isDirectory()) {
            files = files.concat(this.getFiles(path.join(pathname, currentPath)));
          } else {
            files.push(path.join(pathname, currentPath));
          }
        }
      }
      return files;
    };

    Bonk.prototype.processFile = function(filename) {
      var extension;
      extension = (path.extname(filename)).slice(1);
      if (processors[extension]) {
        return processors[extension](filename);
      }
    };

    Bonk.prototype.makeModule = function(modulename, source) {
      var pathname;
      if (!source) {
        return;
      }
      pathname = path.join(modulename, '..');
      if (pathname === '.') {
        pathname = '';
      }
      return "'" + modulename + "': {path: '" + pathname + "', module: function (module, exports, require) {" + source + "}},";
    };

    return Bonk;

  })();

  processors = {
    js: function(filename) {
      return fs.readFileSync(filename, 'utf8');
    },
    coffee: function(filename) {
      return (require('coffee-script')).compile(fs.readFileSync(filename, 'utf8'), {
        bare: true
      });
    },
    jade: function(filename) {
      return 'var jade = require(\'jade\'); module.exports = ' + (require('jade')).compile(fs.readFileSync(filename, 'utf8'), {
        client: true
      });
    }
  };

  exports.Bonk = Bonk;

  exports.processors = processors;

}).call(this);
